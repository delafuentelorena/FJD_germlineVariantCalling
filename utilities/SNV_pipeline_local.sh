#!/bin/sh

################################
### FJD pipeline - Haplotype ###
################################

# REQUIRED MODULES AND DATABASES:

export SFT=/mnt/genetica3/marius/pipeline_practicas_marius/software
alias bwa='$SFT/bwa/bwa'
alias samtools='$SFT/samtools/samtools'
alias picard='java -jar $SFT/picard/build/libs/picard.jar'
alias gatk='java -jar $SFT/gatk/build/libs/gatk-package-4.0.6.0-22-g9d9484f-SNAPSHOT-local.jar'

VEP="${SFT}/variant_effect_predictor/ensembl-vep/vep"
FILTER_VEP="${SFT}/variant_effect_predictor/ensembl-vep/filter_vep"
VEP_CACHE='/mnt/genetica3/marius/pipeline_practicas_marius/software/variant_effect_predictor/.vep'
VEP_FASTA="${VEP_CACHE}/homo_sapiens/93_GRCh37/Homo_sapiens.GRCh37.75.dna.primary_assembly.fa"
PLUGIN_DIR="${VEP_CACHE}/Plugins"
PLUGIN_DBS="${VEP_CACHE}/dbs"
DBNSFP="${PLUGIN_DBS}/dbNSFP_hg19.gz"


### FJD PIPELINE ARGUMENTS:

INPUT=$1
MDAP=$2
sample=$3
threads=$4
run=$5
panel=$6
analysis=$7
cvcf=$8
skipmapping=${9}    
HG19=${10}



echo $analysis

if [ "$skipmapping" != "True" ]; then

	foward="${INPUT}/${sample}*R1*.fastq.gz"
	reverse="${INPUT}/${sample}*R2*.fastq.gz"

else

	mv ${INPUT}/${sample}*bam ${INPUT}/${sample}_alignment.bam
	mv ${INPUT}/${sample}*bai ${INPUT}/${sample}_alignment.bai

fi


softwareFile="${MDAP}/software_${run}.txt"
echo "SNP variant calling:" >> ${softwareFile}
module list 2>> ${softwareFile}



### FJD PIPELINE VARIABLES:
#·······································


#Files generated by the script for each part of the analysis.
#Can change their name or add/remove but then outputs would need redirects.


#IMPORTANT to keep in mind
#If using pathway like ANY=${ANYPATH}/anypath USE DOUBLE QUOTATIONS
#IMPORTANT, or no quotations
#·······································
	#Mapped_data: will contain the .SAM files after alignment using BWA.
MD="${MDAP}/mapped_data"
	#·······································
	#·······································
	#Sorted_data: will store the sorted SAM files, after using Picard.
SD="${MDAP}/sorted_data"
	#·······································
	#·······································
	#Dedupped_data: will store the file of the duplicate reads, after using Picard.
DD="${MDAP}/dedupped_data"
	#·······································
	#·······································
	#Recalibrated_base_quality_scores_data: generates a recalibration table  based on specified covariates, read_group,reported_quiality_score,machine_cycle and nucleotide_context, after GATK.
RBQSRD="${MDAP}/recalibrated_bqsr_data"
	#·······································
	#·····································
	#Applied_bqsr_data: applying the reacalibration table to the BAM file to continue the analysis based on the READS best selected by GATK.

if [ "$skipmapping" != "True" ]; then

	ABQSRD="${MDAP}/applied_bqsr_data"
	mkdir $ABQSRD

else

	ABQSRD="${INPUT}"

fi	
	#·······································
	#·······································
	#Plot_recalibration_data: plots the recalibration differences between the first and the second pass of the recalibration.
	#First using the APPLIED_RECALIBRATION_BQSR_DATA BAM file, running again BaseRecalibrator and generating the plots with AnalyzeCovariates.
PRD="${MDAP}/plot_recalibration_data"
	#·······································
	#·······································
	#Haplotype_caller_gvcf_data:calling for SNPs and indels via local re-assembly of HAPLOTYPES using HAPLOTYPECALLER by GATK.
HCGVCFD="${MDAP}/haplotype_caller_gvcf_data"
	#·······································
	#·······································
	#Perform joint genotyping on one or more samples precalled with Haplotype_caller, if one sample,
	#straight after haplotypecaller and if more than one use Combine_gvcfs.
	#Genotyped_vcf_data: single or single-multisample GVCF as input, output will be a VCF.
GVCFD="${MDAP}/genotyped_vcf_data"
	#·······································
	#·······································
	#HARD_FILTERING, filters for SNPs and filters for INDELs.
	#Variant_filtration_vcf_data:hard filtering process to select based on the INFO and FORMAT annotations(QD,MQO,FS,MQ,ReadPosrankSum)
VFVCFD="${MDAP}/variant_filtration_vcf_data"
	#·······································
	#·······································
	#Vep_vcf_annotated_data: annotations added to the CSQ tag in INFO columnd to the VCF format, --vcf argument (change name in VCF_out)
	#if TSV will come out with a separated tab value for each annotation in a column. --tab argument for TSV format
VEPVCFAD="${MDAP}/vep_vcf_annotated_data"



TMP=$MDAP/tmp_${sample}
echo $TMP
#·······································


if [ "$skipmapping" != "True" ]; then

#Start pipeline processing.




	echo -e '\n\n\n'
	echo -e " _____   _ ____    ____ ___ ____  _____ _     ___ _   _ _____ "
	echo -e "|  ___| | |  _ \  |  _ \_ _|  _ \| ____| |   |_ _| \ | | ____|"
	echo -e "| |_ _  | | | | | | |_) | || |_) |  _| | |    | ||  \| |  _|  "
	echo -e "|  _| |_| | |_| | |  __/| ||  __/| |___| |___ | || |\  | |___ "
	echo -e "|_|  \___/|____/  |_|  |___|_|   |_____|_____|___|_| \_|_____|"
	echo -e "                                                              "
	echo -e " ____ _____  _    ____ _____ ____  "
	echo -e "/ ___|_   _|/ \  |  _ \_   _/ ___| "
	echo -e "\___ \ | | / _ \ | |_) || | \___ \ "
	echo -e " ___) || |/ ___ \|  _ < | |  ___) |"
	echo -e "|____/ |_/_/   \_\_| \_\|_| |____/ "
	echo -e "                                   "
	echo -e '\n\n\n\n\n\n'
	echo ············································································································
	echo -e " ___ _   _ ____  _______  _____ _   _  ____ "
	echo -e "|_ _| \ | |  _ \| ____\ \/ /_ _| \ | |/ ___|"
	echo -e " | ||  \| | | | |  _|  \  / | ||  \| | |  _ "
	echo -e " | || |\  | |_| | |___ /  \ | || |\  | |_| |"
	echo -e "|___|_| \_|____/|_____/_/\_\___|_| \_|\____|"
	echo -e "                                            "
	echo -e " ____  _____ _____ _____ ____  _____ _   _  ____ _____ "
	echo -e "|  _ \| ____|  ___| ____|  _ \| ____| \ | |/ ___| ____|"
	echo -e "| |_) |  _| | |_  |  _| | |_) |  _| |  \| | |   |  _|  "
	echo -e "|  _ <| |___|  _| | |___|  _ <| |___| |\  | |___| |___ "
	echo -e "|_| \_\_____|_|   |_____|_| \_\_____|_| \_|\____|_____|"
	echo -e "                                                       "
	echo -e " _____ ___ _     _____ ____    ______        ___     "
	echo -e "|  ___|_ _| |   | ____/ ___|  | __ ) \      / / \    "
	echo -e "| |_   | || |   |  _| \___ \  |  _ \\ \ /\ / / _ \   "
	echo -e "|  _|  | || |___| |___ ___) | | |_) |\ V  V / ___ \  "
	echo -e "|_|   |___|_____|_____|____/  |____/  \_/\_/_/   \_\ "

	echo -e                                           '\n \tINDEXING REFERENCE FILES (BWA)\n'
	echo ··············································································································





	# BWA index
	if [ ! -f $HG19/ucsc.hg19.fasta.sa ]; then

		#Start BWA INDEX.
		#Stores .dict and .fai files in HG19 directory.
		echo 'Starts BWA INDEX'
		#echo 'Starts BWA INDEX' >>  registerFile
		bwa index $HG19/ucsc.hg19.fasta

		echo -e '\nBWA INDEX DONE' 
		#echo -e '\nBWA INDEX DONE' >> registerFile

	else

		echo 'BWA INDEX already existing. Reference indexing for BWA skipped'

	fi




	# Genome index
	 
	if [ ! -f $HG19/ucsc.hg19.fasta.fai ]; then

		# REMOVE PREVIOUS UCSC.HG19.FASTA.FAI and UCSC.HG19.DICT file ¿¿¿¿Why????
		# LORENA rm $HG19/ucsc.hg19.fasta.fai $HG19/ucsc.hg19.dict ¿¿¿¿Why????

		#Creating .FAI in HG19.
		echo 'Create .FAI file, using samtools faidx'
		#echo 'Create .FAI file, using samtools faidx' >> registerFile
		#samtools faidx $HG19/ucsc.hg19.fasta -o $HG19/ucsc.hg19.fai
		samtools faidx $HG19/ucsc.hg19.fasta 

		echo -e '\nucsc.hg19.fasta.FAI DONE'
		#echo -e '\nucsc.hg19.fasta.FAI DONE' >> registerFile
	else

		echo 'REFERENCE INDEX already existing. Fasta indexing skipped'


	fi



	# Genome dict
	if [ ! -f $HG19/ucsc.hg19.dict ]; then

		#Creating .DICT in HG19.
		echo 'Create .DICT file, using picardtools CreateSequnceDictionary'
		#echo 'Create .DICT file, using picardtools CreateSequnceDictionary' >> registerFile

		# LORENA java -jar picard.jar CreateSequenceDictionary \
		# LORENA R=$HG19/ucsc.hg19.fasta \
		# LORENA O=$HG19/ucsc.hg19.dict

		picard CreateSequenceDictionary R=$HG19/ucsc.hg19.fasta O=$HG19/ucsc.hg19.2.dict

		echo -e 'ucsc.hg19.DICT DONE'
		#echo -e '\nucsc.hg19.DICT DONE'>> registerFile

	else

		echo 'REFERENCE DICT already existing. Dictionary generation skipped'

	fi






	echo ············································································································
	echo -e " __  __    _    ____  ____ ___ _   _  ____  __        _____ _____ _   _ "
	echo -e "|  \/  |  / \  |  _ \|  _ \_ _| \ | |/ ___| \ \      / /_ _|_   _| | | |"
	echo -e "| |\/| | / _ \ | |_) | |_) | ||  \| | |  _   \ \ /\ / / | |  | | | |_| |"
	echo -e "| |  | |/ ___ \|  __/|  __/| || |\  | |_| |   \ V  V /  | |  | | |  _  |"
	echo -e "|_|  |_/_/   \_\_|   |_|  |___|_| \_|\____|    \_/\_/  |___| |_| |_| |_|"
	echo -e "                                                                        "
	echo -e " ______        ___     "
	echo -e "| __ ) \      / / \    "
	echo -e "|  _ \\ \ /\ / / _ \   "
	echo -e "| |_) |\ V  V / ___ \  "
	echo -e "|____/  \_/\_/_/   \_\ "


	echo -e                                              '\n \tMAPPING (BWA)\n'
	echo ············································································································


	#mapping fastq files to reference_genome after BWA INDEX
	#reference genome is: UCSC.HG19.FASTA

	mkdir $MD
	echo 'mkdir mapped_data' 

	#-t threads
	#-P search for Pair mate if not mapped properly, if it found a better hit, skips it.
	# PREVIOUS HEADER $SFT/bwa/./bwa mem -t 12 -R @RG\tID:\tPL:illumina\tSM:Analysis_$i $HG19/ucsc.hg19.fasta \

	echo -e '\nBuilding the header for '${sample}' ongoing...\n'
	#build header
	header=$(zcat $foward | head -n 1)
	echo $header
	id=$(echo $header | head -n 1 | cut -f 1-4 -d':' | sed 's/@//' | sed 's/:/_/g')
	echo $id
	sm=$(echo $header | head -n 1 | grep -Eo '[ATGCN]+$')
	echo $sm
	echo -e "\nThis is how the new header looks\n"
	echo '@RG\tID:'$id'\tSM:'${sample}'\tLB:'$id'_'$sm'\tSM:'$id'_'$m'\tPL:ILLUMINA'
	echo -e '\nHEADER --> DONE\n'


	echo -e '\n\nStart BWA MEM for '${sample}''
	#echo 'Start BWA MEM for '${sample}' sample'>> registerFile
	echo ············································································································
	bwa mem -v 3 -t $threads -R '@RG\tID:'$id'\tSM:'${sample}'\tLB:'$id'_'$sm'\tPL:ILLUMINA' \
	$HG19/ucsc.hg19.fasta \
	$foward \
	$reverse > $MD/mapped_${sample}.sam
	#echo -e '\nBWA MEM '$i'  DONE' ; paplay /usr/share/sounds/freedesktop/stereo/complete.oga
	echo -e '\nBWA MEM '${sample}'  DONE'
	#Unzip all the files before continuing the process.
	#echo 'Unzip mapped sams.'
	#echo 'Unzip mapped sams.' >> registerFile
	#If unzipped not necessary
	# LORENA  gunzip -k $MD/mapped_${sample}.sam.gz
	#echo 'Gunzip completed.'
	#echo 'Gunzip completed.' >> registerFile
	#Comprobar si el archivo esta en formato zip o no.









	echo ···········································································································
	echo -e " ____   ___  ____ _____ ___ _   _  ____   ____    _    __  __ "
	echo -e "/ ___| / _ \|  _ \_   _|_ _| \ | |/ ___| / ___|  / \  |  \/  |"
	echo -e "\___ \| | | | |_) || |  | ||  \| | |  _  \___ \ / _ \ | |\/| |"
	echo -e " ___) | |_| |  _ < | |  | || |\  | |_| |  ___) / ___ \| |  | |"
	echo -e "|____/ \___/|_| \_\|_| |___|_| \_|\____| |____/_/   \_\_|  |_|"
	echo -e                                         '\n \tSORTING SAM (PICARD)\n'
	echo ···········································································································


	mkdir $SD
	mkdir $TMP
	echo 'mkdir sorted_data'
	#Sorting the mapped data.

	#SORTING THE SAM FILE.
	echo 'Run picard SortSam for '${sample}''
	#echo 'Run picard SortSam '${sample}''>> registerFile
	picard SortSam TMP_DIR=$TMP I=$MD/mapped_${sample}.sam  \
	         O=$SD/sorted${sample}.bam \
	         SO=coordinate
	echo -e '\nPicard SortSam for '${sample}'  DONE' 
	#echo -e '\nPicard SortSam '$i'  DONE' >> registerFile







	echo ············································································································
	echo -e " __  __    _    ____  _  _____ _   _  ____ "
	echo -e "|  \/  |  / \  |  _ \| |/ /_ _| \ | |/ ___|"
	echo -e "| |\/| | / _ \ | |_) | ' / | ||  \| | |  _ "
	echo -e "| |  | |/ ___ \|  _ <| . \ | || |\  | |_| |"
	echo -e "|_|  |_/_/   \_\_| \_\_|\_\___|_| \_|\____|"
	echo -e "                                           "
	echo -e " ____  _   _ ____  _     ___ ____    _  _____ _____ ____  "
	echo -e "|  _ \| | | |  _ \| |   |_ _/ ___|  / \|_   _| ____/ ___| "
	echo -e "| | | | | | | |_) | |    | | |     / _ \ | | |  _| \___ \ "
	echo -e "| |_| | |_| |  __/| |___ | | |___ / ___ \| | | |___ ___) |"
	echo -e "|____/ \___/|_|   |_____|___\____/_/   \_\_| |_____|____/ "
	echo -e "                                                          "
	echo -e " ____ ___ ____    _    ____  ____  "
	echo -e "|  _ \_ _/ ___|  / \  |  _ \|  _ \ "
	echo -e "| |_) | | |     / _ \ | |_) | | | |"
	echo -e "|  __/| | |___ / ___ \|  _ <| |_| |"
	echo -e "|_|  |___\____/_/   \_\_| \_\____/ "
	echo -e "                                   "
	echo -e                                         '\n \tMARKING DUPLICATES (PICARD)\n'
	echo ············································································································


	#Selecting the duplicates reads from the mapped and sorted reads.
	mkdir $DD
	echo 'mkdir dedupped_data'

	#Mark duplicates PICARD
	echo 'Start picard MarkDuplicates '${sample}' '
	#echo 'Start picard MarkDuplicates '$i' '>>registerFile
	#LORENA java -jar $SFT/picard/build/libs/picard.jar MarkDuplicates \
	picard MarkDuplicates TMP_DIR=$TMP \
	 I=$SD/sorted${sample}.bam \
	 O=$DD/dedupped_${sample}.bam \
	 M=$DD/marked_dup_metrics_${sample}.txt \
	 REMOVE_DUPLICATES=true \
	 AS=SortOrder

	echo -e '\n PICARD MarkDuplicates '${sample}' DONE' 






	echo ············································································································
	echo -e " ____  _____ ____  _   _ ____  ____  _____ ____    ____    _    __  __ "
	echo -e "|  _ \| ____|  _ \| | | |  _ \|  _ \| ____|  _ \  | __ )  / \  |  \/  |"
	echo -e "| | | |  _| | | | | | | | |_) | |_) |  _| | | | | |  _ \ / _ \ | |\/| |"
	echo -e "| |_| | |___| |_| | |_| |  __/|  __/| |___| |_| | | |_) / ___ \| |  | |"
	echo -e "|____/|_____|____/ \___/|_|   |_|   |_____|____/  |____/_/   \_\_|  |_|"
	echo -e "                                                                       "
	echo -e " ___ _   _ ____  _______  __  ____    _    ___   _____ ___ _     _____   "
	echo -e "|_ _| \ | |  _ \| ____\ \/ / | __ )  / \  |_ _| |  ___|_ _| |   | ____|  "
	echo -e " | ||  \| | | | |  _|  \  /  |  _ \ / _ \  | |  | |_   | || |   |  _|    "
	echo -e " | || |\  | |_| | |___ /  \  | |_) / ___ \ | |  |  _|  | || |___| |___ _ "
	echo -e "|___|_| \_|____/|_____/_/\_\ |____/_/   \_\___| |_|   |___|_____|_____(_)"
	echo -e "                                                                         "
	echo -e                                         '\n \t Dedupped BAM index (BAI) file. \n'
	echo ············································································································

	#Create a .BAI file to compare original vs removed duplicates reads.

	#	#Indexing the BAM files.
	#	#Generating the .BAI files from the DEDUPPED (markedDuplicates from the original SAM/BAM file).
	echo 'Indexing '${sample}' BAM files'
	#echo 'Indexing '$i' BAM files' >> registerFile
	#LORENA java -jar $SFT/picard/build/libs/picard.jar BuildBamIndex \
	picard BuildBamIndex TMP_DIR=$TMP \
	 I=$DD/dedupped_${sample}.bam \
	 O=$DD/dedupped_${sample}.bai

	echo -e '\n PICARD BuildBamIndex '${sample}' DONE'







	echo ············································································································
	echo -e " ____   ___  ____  ____   "
	echo -e "| __ ) / _ \/ ___||  _ \  "
	echo -e "|  _ \| | | \___ \| |_) | "
	echo -e "| |_) | |_| |___) |  _ <  "
	echo -e "|____/ \__\_\____/|_| \_\ "
	echo -e "                          "
	echo -e " ____  _____ ____    _    _     ___ ____  ____      _  _____ ___ ___  _   _  "
	echo -e "|  _ \| ____/ ___|  / \  | |   |_ _| __ )|  _ \    / \|_   _|_ _/ _ \| \ | | "
	echo -e "| |_) |  _|| |     / _ \ | |    | ||  _ \| |_) |  / _ \ | |  | | | | |  \| | "
	echo -e "|  _ <| |__| |___ / ___ \| |___ | || |_) |  _ <  / ___ \| |  | | |_| | |\  | "
	echo -e "|_| \_\_____\____/_/   \_\_____|___|____/|_| \_\/_/   \_\_| |___\___/|_| \_| "
	echo -e "                                                                             "
	echo -e " ____    _  _____  _     "
	echo -e "|  _ \  / \|_   _|/ \    "
	echo -e "| | | |/ _ \ | | / _ \   "
	echo -e "| |_| / ___ \| |/ ___ \  "
	echo -e "|____/_/   \_\_/_/   \_\ "
	echo -e                                     '\n \tBQSR (GATK)\n'
	echo -e                                      '\t -.1 Recalibration data table\n'
	echo -e                                      '\t -.2 Recalibration data table \n'
	echo ············································································································



	#Recalibrating  the reads using base quality score reads.
	mkdir $RBQSRD
	echo 'mkdir recalibrated_bqsr_data' 

	#GATK BaseRecalibration first table
	#BaseRecalibration + table
	echo 'Starts GATK '${sample}' Recalibrator'
	#echo 'Starts GATK '$1' Recalibrator' >> registerFile
	#LORENA java -jar gatk-package-4.0.6.0-22-g9d9484f-SNAPSHOT-local.jar BaseRecalibrator \
	gatk BaseRecalibrator --TMP_DIR=$TMP \
	-R $HG19/ucsc.hg19.fasta \
	-I $DD/dedupped_${sample}.bam \
	--known-sites $HG19/dbsnp_138.hg19.vcf \
	--known-sites $HG19/1000G_phase1.indels.hg19.sites.vcf \
	--known-sites $HG19/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \
	-O $RBQSRD/before_recalibrated_bqsr_data_${sample}.recal.table
	#--bqsr 1st_racalibration.table

	echo -e '\n GATK BaseRecalibrator '${sample}' DONE' 
	# echo -e '\n GATK BaseRecalibrator '$i' DONE' >>registerFile






	echo ············································································································
	echo -e "    _    ____  ____  _  __   _____ _   _  ____   ____   ___  ____  ____   "
	echo -e "   / \  |  _ \|  _ \| | \ \ / /_ _| \ | |/ ___| | __ ) / _ \/ ___||  _ \  "
	echo -e "  / _ \ | |_) | |_) | |  \ V / | ||  \| | |  _  |  _ \| | | \___ \| |_) | "
	echo -e " / ___ \|  __/|  __/| |___| |  | || |\  | |_| | | |_) | |_| |___) |  _ <  "
	echo -e "/_/   \_\_|   |_|   |_____|_| |___|_| \_|\____| |____/ \__\_\____/|_| \_\ "
	echo -e "                                                                          "
	echo -e "__        _____ _____ _   _    ____    _  _____ _  __ "
	echo -e "\ \      / /_ _|_   _| | | |  / ___|  / \|_   _| |/ / "
	echo -e " \ \ /\ / / | |  | | | |_| | | |  _  / _ \ | | | ' /  "
	echo -e "  \ V  V /  | |  | | |  _  | | |_| |/ ___ \| | | . \  "
	echo -e "   \_/\_/  |___| |_| |_| |_|  \____/_/   \_\_| |_|\_\ "
	echo -e "                                                     "
	echo -e                                       '\n \tApplying BQSR GATK\n'
	echo ············································································································




	#Applying the recalibration table to the bam file to continue the analysis.

	#ApplyBQSR
	echo 'Starts picard  '${sample}' ApplyBQSR'
	#echo 'Starts picard  '$i' ApplyBQSR' >> registerFile
	# LORENA java -jar gatk-package-4.0.6.0-22-g9d9484f-SNAPSHOT-local.jar ApplyBQSR \
	gatk ApplyBQSR --TMP_DIR=$TMP \
	-R $HG19/ucsc.hg19.fasta \
	-I $DD/dedupped_${sample}.bam \
	--bqsr $RBQSRD/before_recalibrated_bqsr_data_${sample}.recal.table \
	-O $ABQSRD/${sample}_alignment.bam

	echo -e '\nGATK ApplyBQSR '${sample}' DONE'
	# echo -e '\nGATK ApplyBQSR '$i' DONE' >>registerFile


fi



if [ "$analysis" = "mapping" ]; then

	exit 0

fi


echo ············································································································
echo -e "    _    _   _    _    _  __   ____________ "
echo -e "   / \  | \ | |  / \  | | \ \ / /__  / ____|"
echo -e "  / _ \ |  \| | / _ \ | |  \ V /  / /|  _|  "
echo -e " / ___ \| |\  |/ ___ \| |___| |  / /_| |___ "
echo -e "/_/   \_\_| \_/_/   \_\_____|_| /____|_____|"
echo -e "  ____ _____     ___    ____  ___    _  _____ _____ ____    _____ ___  ____    "
echo -e " / ___/ _ \ \   / / \  |  _ \|_ _|  / \|_   _| ____/ ___|  |  ___/ _ \|  _ \   "
echo -e "| |  | | | \ \ / / _ \ | |_) || |  / _ \ | | |  _| \___ \  | |_ | | | | |_) |  "
echo -e "| |__| |_| |\ V / ___ \|  _ < | | / ___ \| | | |___ ___) | |  _|| |_| |  _ <   "
echo -e " \____\___/  \_/_/   \_\_| \_\___/_/   \_\_| |_____|____/  |_|   \___/|_| \_\  "
echo -e "                                                                               "
echo -e " ____  ____  _____   ____  _     ___ _____ ____    "
echo -e "|  _ \|  _ \|  ___| |  _ \| |   / _ \_   _/ ___|   "
echo -e "| |_) | | | | |_    | |_) | |  | | | || | \___ \   "
echo -e "|  __/| |_| |  _|   |  __/| |__| |_| || |  ___) |  "
echo -e "|_|   |____/|_|     |_|   |_____\___/ |_| |____/   "
echo -e "                                                   "
echo -e "  ____ ___  __  __ ____   _    ____      _  _____ ___ ___  _   _    ___  _____  "
echo -e " / ___/ _ \|  \/  |  _ \ / \  |  _ \    / \|_   _|_ _/ _ \| \ | |  / _ \|  ___| "
echo -e "| |  | | | | |\/| | |_) / _ \ | |_) |  / _ \ | |  | | | | |  \| | | | | | |_    "
echo -e "| |__| |_| | |  | |  __/ ___ \|  _ <  / ___ \| |  | | |_| | |\  | | |_| |  _|   "
echo -e " \____\___/|_|  |_|_| /_/   \_\_| \_\/_/   \_\_| |___\___/|_| \_|  \___/|_|     "
echo -e "                                                                                "
echo -e " _____ _   _ _____  "
echo -e "|_   _| | | | ____| "
echo -e "  | | | |_| |  _|   "
echo -e "  | | |  _  | |___  "
echo -e "  |_| |_| |_|_____| "
echo -e "                    "
echo -e " ____  _____ ____    _    _     ___ ____  ____      _  _____ ___ ___  _   _  "
echo -e "|  _ \| ____/ ___|  / \  | |   |_ _| __ )|  _ \    / \|_   _|_ _/ _ \| \ | | "
echo -e "| |_) |  _|| |     / _ \ | |    | ||  _ \| |_) |  / _ \ | |  | | | | |  \| | "
echo -e "|  _ <| |__| |___ / ___ \| |___ | || |_) |  _ <  / ___ \| |  | | |_| | |\  | "
echo -e "|_| \_\_____\____/_/   \_\_____|___|____/|_| \_\/_/   \_\_| |___\___/|_| \_| "
echo -e "                                                                             "
echo -e " ____    _  _____  _       ____    _  _____ _  __ "
echo -e "|  _ \  / \|_   _|/ \     / ___|  / \|_   _| |/ / "
echo -e "| | | |/ _ \ | | / _ \   | |  _  / _ \ | | | ' /  "
echo -e "| |_| / ___ \| |/ ___ \  | |_| |/ ___ \| | | . \  "
echo -e "|____/_/   \_\_/_/   \_\  \____/_/   \_\_| |_|\_\ "
echo -e "                                                  "
echo -e             '\n \tAnalyze Covariates for PDF plots comparation of the Recalibration GATK\n'
echo -e 		"Comparisson among the bias of the sequencer errors"
echo ············································································································



mkdir $PRD
echo 'mkdir plot_recalibration_data' 
echo 'Starts GATK Second Recalibration'
#echo 'Starts GATK Second Recalibration' >> registerFile

        #GATK BaseRecalibration second table for next step AnalyzeCovariates.
        #Generates the second pass table.
        #instead of second table, we use the BAM created by ApplyBQSR to regenrate a new TABLE for plot.

echo $ABQSRD/${sample}_alignment.bam

gatk BaseRecalibrator --TMP_DIR=$TMP \
-I $ABQSRD/${sample}_alignment.bam \
-R $HG19/ucsc.hg19.fasta \
--known-sites $HG19/dbsnp_138.hg19.vcf \
--known-sites $HG19/1000G_phase1.indels.hg19.sites.vcf \
--known-sites $HG19/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \
-O $PRD/after_recalibrated_bqsr_data_${sample}.recal.table
#second bqsr table for comparation.


echo 'Second recalibration GATK table --> DONE'

	#Full generating the Plots of the recalibration tables using AnalyzeCovariates and saving a csv copy.
	#Analyze  the tables.

echo  -e '\n  Generating Plots, pdf and csv files'


echo -e '\nGenerating the files for ${sample} starting...'

gatk AnalyzeCovariates --TMP_DIR=$TMP \
-before $RBQSRD/before_recalibrated_bqsr_data_${sample}.recal.table \
-after $PRD/after_recalibrated_bqsr_data_${sample}.recal.table \
-csv $PRD/BQSR_${sample}.csv \
-plots $PRD/AnalyzeCovariates_bqsr_${sample}.pdf


echo '\nPlot and CSV file for ${sample} is DONE!'

echo -e '\n Plots files generated --> DONE'
#Obtaining an CSV and PDF file of the comparrisson between first and second pass of the recalibration applied to the bam fi$




echo ············································································································

echo -e " _   _    _    ____  _     ___ _______   ______  _____ "
echo -e "| | | |  / \  |  _ \| |   / _ \_   _\ \ / /  _ \| ____|"
echo -e "| |_| | / _ \ | |_) | |  | | | || |  \ V /| |_) |  _|  "
echo -e "|  _  |/ ___ \|  __/| |__| |_| || |   | | |  __/| |___ "
echo -e "|_| |_/_/   \_\_|   |_____\___/ |_|   |_| |_|   |_____|"
echo -e "                                                       "
echo -e "  ____    _    _     _     _____ ____   "
echo -e " / ___|  / \  | |   | |   | ____|  _ \  "
echo -e "| |     / _ \ | |   | |   |  _| | |_) | "
echo -e "| |___ / ___ \| |___| |___| |___|  _ <  "
echo -e " \____/_/   \_\_____|_____|_____|_| \_\ "
echo -e "                                        "
echo -e                                       '\n \tHAPLOTYPE CALLER GATK\n'

#echo ············································································································



#Ready to call for Variants.
mkdir $HCGVCFD
echo 'mkdir haplotype_caller_gvcf_data' 

#HaplotypeCaller for each sample for later joint genotyping.
echo -e '\nGATK HaplotypeCallerGVCF for '${sample}' STARTS'
#echo -e '\nGATK HaplotypeCallerGVCF for '${sample}' STARTS'>> registerFile
#LORENA         java -jar $SFT/gatk/build/libs/gatk-package-4.0.6.0-22-g9d9484f-SNAPSHOT-local.jar HaplotypeCaller \
gatk HaplotypeCaller --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-I $ABQSRD/${sample}_alignment.bam \
-ERC GVCF \
-bamout $HCGVCFD/HC_bamout_${sample}.bam \
-O $HCGVCFD/HC_data_${sample}.g.vcf \
-G StandardAnnotation \
-G AS_StandardAnnotation \
-G StandardHCAnnotation \
-A FisherStrand -A StrandOddsRatio -A RMSMappingQuality -A MappingQualityRankSumTest -A ReadPosRankSumTest -A DepthPerSampleHC -A BaseQualityRankSumTest -A ExcessHet -A StrandArtifact \
--annotate-with-num-discovered-alleles=true 


# if [ "$panel" != "genome" ]; then
# 	bgzip -c $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf > $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz
# 	bcftools index $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz
# 	bcftools filter -R $panel -o $VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.vcf $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz 
# 	bcftools stats 	$VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.vcf > $VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.stats
# 
#else
#
#fi



echo -e '\nGATK HaplotypeCallerGVCF ERC GVCF for '${sample}' DONE' 
#echo -e '\nGATK HaplotypeCallerGVCF ERC GVCF for '${sample}' DONE' >> registerFile


echo $HCGVCFD/HC_data_${sample}.g.vcf >> $HCGVCFD/my_list_of_gvcfs_files_to_combine_$run.list







if [ "$cvcf" = "True" ]; then

	exit 0

fi



echo ············································································································
echo -e "   ____ _____ _   _  ___ _______   ______  _____  "
echo -e "  / ___| ____| \ | |/ _ \_   _\ \ / /  _ \| ____| "
echo -e " | |  _|  _| |  \| | | | || |  \ V /| |_) |  _|   "
echo -e " | |_| | |___| |\  | |_| || |   | | |  __/| |___  "
echo -e "  \____|_____|_| \_|\___/ |_|   |_| |_|   |_____| "
echo -e "                                                  "
echo -e "  ____    _    _     _     _____ ____   "
echo -e " / ___|  / \  | |   | |   | ____|  _ \  "
echo -e "| |     / _ \ | |   | |   |  _| | |_) | "
echo -e "| |___ / ___ \| |___| |___| |___|  _ <  "
echo -e " \____/_/   \_\_____|_____|_____|_| \_\ "
echo -e "                                        "
echo ············································································································


#GenotypeGVCFs into final VCF

mkdir $GVCFD
echo 'mkdir genotyped_data_vcf'

#GenotypeGVCF into final VCF
echo -e '\nUsing GATK GenotypeGVCFs for final VCF'
gatk GenotypeGVCFs --TMP_DIR=$TMP \
    -R $HG19/ucsc.hg19.fasta \
    -V $HCGVCFD/HC_data_${sample}.g.vcf \
    -G StandardAnnotation \
    -O $GVCFD/genotyped_data_${sample}.vcf 

echo -e '\nGATK GenotypeGVCFs for '${sample}' DONE'







echo ············································································································
echo -e " _   _    _    ____  ____    _____ ___ _   _____ _____ ____  ___ _   _  ____ "
echo -e "| | | |  / \  |  _ \|  _ \  |  ___|_ _| | |_   _| ____|  _ \|_ _| \ | |/ ___|"
echo -e "| |_| | / _ \ | |_) | | | | | |_   | || |   | | |  _| | |_) || ||  \| | |  _ "
echo -e "|  _  |/ ___ \|  _ <| |_| | |  _|  | || |___| | | |___|  _ < | || |\  | |_| |"
echo -e "|_| |_/_/   \_\_| \_\____/  |_|   |___|_____|_| |_____|_| \_\___|_| \_|\____|"
echo -e "                                                                             "
echo -e  "\n \tHard filtering if less than 30 samples and doing it in the classical way, selecting variants\n"
echo ············································································································


	#HARD FILTERING
	#First step extacting the SNP's
	#Second step extracting the INDEL's


mkdir $VFVCFD
echo "mkdir variant_filtration_data_vcf"

### SNPs

	#1.Extract the SNP's from the call set.
echo "Extract the SNP's from the call set."

gatk SelectVariants --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-V $GVCFD/genotyped_data_${sample}.vcf \
--select-type-to-include SNP \
-O $VFVCFD/selected_raw_snp_${sample}.vcf
	#Creates the selected_raw_snps vcf containing just the SNP's from the original  callset.


	#2.Apply the filters to the SNP's callset.

gatk VariantFiltration --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-V $VFVCFD/selected_raw_snp_${sample}.vcf \
--filter-expression "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0" \
--filter-name "my_SNP_filter" \
-O $VFVCFD/filtered_SNP_data_${sample}.vcf



### INDELs

	#3. Extract the INDELS from the ORIGINAL call set.
gatk SelectVariants --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-V $GVCFD/genotyped_data_${sample}.vcf \
--select-type-to-include INDEL \
-O $VFVCFD/selected_raw_indels_${sample}.vcf
	#Creates the selected_raw_indels vcf containing just the INDEL's from the original  callset.


	#4.Apply the filters to the INDEL's callset.
gatk VariantFiltration --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-V $VFVCFD/selected_raw_indels_${sample}.vcf \
--filter-expression "QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0" \
--filter-name "my_INDEL_filter" \
-O $VFVCFD/filtered_INDEL_data_${sample}.vcf


# Combine Variants after using SNPS and INDELS filtering into a single file and get it ready for annotation.

gatk MergeVcfs --TMP_DIR=$TMP \
-R $HG19/ucsc.hg19.fasta \
-I $VFVCFD/filtered_SNP_data_${sample}.vcf \
-I $VFVCFD/filtered_INDEL_data_${sample}.vcf \
-O $VFVCFD/filtered_INDEL_SNP_data_${sample}.vcf


# echo ············································································································
# echo -e "Filtering QUALITY,chrM,chrUn,my_SNP_filter and my_INDEL_filter out of the VCF file"
# echo ············································································································

# awk 'BEGIN {FS=OFS="\t"}{if ($1 ~/^#/){print $0} else if ($1 ~/^chrM.*/ || $1 ~/^chrUn.*/  || $7 ~/my_SNP_filter/ || $7 ~/my_INDEL_filter/ || $6 < 100) {print ""} else {print $0}}'  $VFVCFD/filtered_INDEL_SNP_data_${sample}.vcf > $VFVCFD/test_${sample}; gawk 'NF > 0' $VFVCFD/test_${sample} >  $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf

# bcftools stats $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf > $VFVCFD/pre_filtered_ready_to_annotate_${sample}.stats


# #### Filtering by panel coordinates

# if [ "$panel" != "genome" ]; then
# 	bgzip -c $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf > $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz
# 	bcftools index $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz
# 	bcftools filter -R $panel -o $VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.vcf $VFVCFD/pre_filtered_ready_to_annotate_${sample}.vcf.gz 
# 	bcftools stats 	$VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.vcf > $VFVCFD/pre_filtered_ready_to_annotate_TARGETING_${sample}.stats
# fi



echo ············································································································
echo -e "__     ___    ____  ___    _    _   _ _____ "
echo -e "\ \   / / \  |  _ \|_ _|  / \  | \ | |_   _|"
echo -e " \ \ / / _ \ | |_) || |  / _ \ |  \| | | |  "
echo -e "  \ V / ___ \|  _ < | | / ___ \| |\  | | |  "
echo -e "   \_/_/   \_\_| \_\___/_/   \_\_| \_| |_|  "
echo -e "                                            "
echo -e "    _    _   _ _   _  ___ _____  _  _____ ___ ___  _   _ "
echo -e "   / \  | \ | | \ | |/ _ \_   _|/ \|_   _|_ _/ _ \| \ | |"
echo -e "  / _ \ |  \| |  \| | | | || | / _ \ | |  | | | | |  \| |"
echo -e " / ___ \| |\  | |\  | |_| || |/ ___ \| |  | | |_| | |\  |"
echo -e "/_/   \_\_| \_|_| \_|\___/ |_/_/   \_\_| |___\___/|_| \_|"
echo -e "                                                         "
echo -e                                  "\n \tVARIANT ANNOTATION (VEP ENSEMBL)\n"

echo ············································································································



mkdir $VEPVCFAD
echo "mkdir vep_vcf_annotated_data"

VCF_IN="${VFVCFD}/filtered_INDEL_SNP_data_${sample}.vcf"
VCF_OUT="${VEPVCFAD}/vep_qual_filters_${sample}.vcf"

VCF_FILTERED="${VEPVCFAD}/vep_qual_filters_annotated_${sample}.vcf"
VCF_FILTERED_2="${VEPVCFAD}/vep_qual_filters_annotated_can_conseq_${sample}.vcf"
VCF_FILTERED_3="${VEPVCFAD}/vep_qual_filters_annotated_can_conseq_freqs_${sample}.vcf"




echo ············································································································
echo -e '\nFilter by quality and chromosome\n'
echo ············································································································

perl $FILTER_VEP \
-i $VCF_IN -o $VCF_OUT \
--filter "QUAL > 100 and FILTER = PASS" \
--filter "CHROM in chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22,chr23,chrX,chrY" --force_overwrite \


echo ············································································································
echo -e '\nVEP annotation\n'
echo ············································································································

perl $VEP \
--cache --offline --dir $VEP_CACHE --dir_plugins $PLUGIN_DIR --v --fork 16 --assembly GRCh37 --fasta $VEP_FASTA --force_overwrite \
--biotype --regulatory --protein --symbol --allele_number --numbers --domains --uniprot --variant_class \
--canonical \
--sift p --polyphen p --af --max_af \
--format vcf --vcf \
--pubmed \
--plugin dbscSNV,$PLUGIN_DBS/dbscSNV1.1_GRCh37.txt.gz \
--plugin LoFtool,$PLUGIN_DIR/LoFtool_scores.txt \
--plugin ExACpLI,$PLUGIN_DIR/ExACpLI_values.txt \
--plugin dbNSFP,$DBNSFP,gnomAD_exomes_AF,gnomAD_exomes_NFE_AF,gnomAD_genomes_AF,1000Gp3_AF,1000Gp3_EUR_AF,ExAC_AF,ExAC_EAS_AF,ExAC_NFE_AF,ExAC_Adj_AF,rs_dbSNP150,phyloP20way_mammalian,phyloP20way_mammalian_rankscore,phastCons20way_mammalian,phastCons20way_mammalian_rankscore,GERP++_RS,GERP++_RS_rankscore,LRT_pred,MutationTaster_pred,MutationAssessor_pred,FATHMM_pred,PROVEAN_pred,MetaLR_pred,MetaSVM_pred,M-CAP_pred,Interpro_domain,GTEx_V6p_gene,GTEx_V6p_tissue \
-i $VCF_OUT -o $VCF_FILTERED


echo ············································································································
echo -e '\nFilter by population frequencies\n'
echo ············································································································

perl $FILTER_VEP \
-i $VCF_FILTERED -o $VCF_FILTERED_2 \
--filter "DP > 10" \
--filter "CANONICAL = YES" \
--filter "Consequence is 3_prime_UTR_variant or Consequence is 5_prime_UTR_variant or Consequence is intron_variant or Consequence is splice_donor_variant or Consequence is splice_acceptor_variant or Consequence is splice_region_variant or Consequence is synonymous_variant or Consequence is missense_variant or Consequence is inframe_deletion or Consequence is inframe_insertion or Consequence is stop_gained or Consequence is frameshift_variant or Consequence is coding_sequence_variant" --force_overwrite \

perl $FILTER_VEP \
-i $VCF_FILTERED_2 -o $VCF_FILTERED_3 \
--filter "AF < 0.01 or not AF" \
--filter "(ExAC_EAS_AF < 0.01 or not ExAC_EAS_AF) and (1000Gp3_AF < 0.01 or not 1000Gp3_AF) and (1000Gp3_EUR_AF < 0.01 or not 1000Gp3_EUR_AF ) and (gnomAD_exomes_AF < 0.01 or not gnomAD_exomes_AF) and (ExAC_AF < 0.01 or not ExAC_AF) and (ExAC_Adj_AF < 0.01 or not ExAC_Adj_AF) and (ExAC_NFE_AF < 0.01 or not ExAC_NFE_AF) and (gnomAD_exomes_NFE_AF < 0.01 or not gnomAD_exomes_NFE_AF) and (gnomAD_genomes_AF < 0.01 or not gnomAD_genomes_AF)" --force_overwrite \

